<application>
  <component name="AppStorage">
    <histories>
      <item value="Thread" />
      <item value="Unexpected exception during isValid call." />
      <item value="Unexpected" />
      <item value="Constraint" />
      <item value="param Validate Info" />
      <item value="Executable" />
      <item value="Groupsequence" />
      <item value="not Empty" />
      <item value="blank" />
      <item value="pass Word" />
      <item value="password" />
      <item value="of" />
      <item value="exclude" />
      <item value="sink" />
      <item value="symmetric" />
      <item value="intersection" />
      <item value="Multi" />
      <item value="This exception interacts with a thread's interrupted status, * and runtime misbehavior is likely to occur if an {@code * InterruptedException} is {@linkplain Throwable#addSuppressed * suppressed" />
      <item value="Implementers of this interface are also strongly advised * to not have the" />
      <item value="Cases where the close operation may fail require careful * attention by implementers. It is strongly advised to relinquish * the underlying resources and to internally &lt;em&gt;mark&lt;/em&gt; the * resource as closed, prior to throwing the exception. The {@code * close} method is unlikely to be invoked more than once and so * this ensures that the resources are released in a timely manner. * Furthermore it reduces problems that could arise when the resource * wraps, or is wrapped, by another resource." />
      <item value="While this interface method is declared to throw {@code * Exception}, implementers are &lt;em&gt;strongly&lt;/em&gt; encouraged to * declare concrete implementations of the {@code close} method to * throw more specific exceptions, or to throw no exception at all * if the close operation cannot fail." />
      <item value="Closes this resource, relinquishing any underlying resources. * This method is invoked automatically on objects managed by the * {@code try}withresources statement." />
      <item value="It is possible, and in fact common, for a base class to * implement AutoCloseable even though not all of its subclasses or * instances will hold releasable resources. For code that must operate * in complete generality, or when it is known that the {@code AutoCloseable} * instance requires resource release, it is recommended to use {@code * try}withresources constructions. However, when using facilities such as * {@link java.util.stream.Stream} that support both I/Obased and * nonI/Obased forms, {@code try}withresources blocks are in * general unnecessary when using nonI/Obased forms." />
      <item value="It is possible" />
      <item value="An object that may hold resources (such as file or socket handles) * until it is closed. The {@link #close()} method of an {@code AutoCloseable} * object is called automatically when exiting a {@code * try}withresources block for which the object has been declared in * the resource specification header. This construction ensures prompt * release, avoiding resource exhaustion exceptions and errors that * may otherwise occur. *" />
      <item value="Closes this stream and releases any system resources associated * with it. If the stream is already closed then invoking this * method has no effect." />
      <item value="try Catch Resource" />
      <item value="efficiency" />
      <item value="fallback Execution" />
      <item value="phase" />
      <item value="Execution" />
      <item value="fall" />
      <item value="Phase" />
      <item value="Transaction Phase" />
      <item value="AFTERCOMPLETION" />
      <item value="COMPLETION" />
      <item value="AFTERCOMMIT" />
      <item value="AFTERROLLBACK" />
      <item value="SQLException: sql injection violation, delete not allow" />
      <item value="sql injection violation" />
      <item value="Something" />
      <item value="do Something" />
      <item value="do Some Thing" />
      <item value="Thing Event" />
      <item value="Thing" />
      <item value="Thing Listener" />
      <item value="do Thing" />
      <item value="dothing" />
      <item value="dothing Listener" />
      <item value="Something Listener" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2278" />
        <entry key="ENGLISH" value="2236" />
        <entry key="CHINESE_TRADITIONAL" value="2" />
        <entry key="FRENCH" value="62" />
        <entry key="PORTUGUESE" value="5" />
        <entry key="SPANISH" value="6" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="[-_]" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Lucida Sans Unicode" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="72daf72feb661e19" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>