<application>
  <component name="AppStorage">
    <histories>
      <item value="Field refers to fields of regular Java objects. Although * they are not really methods, addition of optional field discovery * in version 1.1 meant that there was need to enable/disable * their auto detection, and this is the place to add it in." />
      <item value="monster" />
      <item value="deserialization List" />
      <item value="de Serialization List" />
      <item value="de Serializalist" />
      <item value="my Data" />
      <item value="Access setting that means that the property will be accessed for both * serialization (writing out values as external representation) * and deserialization (reading values from external representation), * regardless of visibility rules." />
      <item value="Property that indicates numerical index of this property (relative * to other properties specified for the Object). This index * is typically used by binary formats, but may also be useful * for schema languages and other tools." />
      <item value="Property that indicates whether a value (which may be explicit * null) is expected for property during deserialization or not. * If expected, &lt;code&gt;BeanDeserialized&lt;/code&gt; should indicate * this as a validity problem (usually by throwing an exception, * but this may be sent via problem handlers that can try to * rectify the problem, for example, by supplying a default * value). *&lt;p&gt; * Note that as of 2.6, this property is only used for Creator * Properties, to ensure existence of property value in JSON: * for other properties (ones injected using a setter or mutable * field), no validation is performed. Support for those cases * may be added in future. * State of this property is exposed via introspection, and its * value is typically used by Schema generators, such as one for * JSON Schema." />
      <item value="Defines name of the logical property, i.e. JSON object field * name to use for the property. If value is empty String (which is the * default), will try to use name of the field that is annotated. * Note that there is * &lt;b&gt;no default name available for constructor arguments&lt;/b&gt;, * meaning that * &lt;b&gt;Empty String is not a valid value for constructor arguments&lt;/b&gt;." />
      <item value="arker value used to indicate that no index has been specified. * Used as the default value as annotations do not allow &quot;missing&quot; * values." />
      <item value="name (derived from method or field name) for property." />
      <item value="efault value (&quot;&quot;) indicates that the field name is used * as the property name without any modifications, but it * can be specified to non empty value to specify different * name. Property name refers to name used externally, as * the field name in JSON objects." />
      <item value="indicates" />
      <item value="Default value (&quot;&quot;) indicates that the field name is used * as the property name without any modifications, but it * can be specified to non empty value to specify different * name. Property name refers to name used externally, as * the field name in JSON objects." />
      <item value="Marker annotation that can be used to define a non static * method as a &quot;setter&quot; or &quot;getter&quot; for a logical property * (depending on its signature), * or non static object field to be used (serialized, deserialized) as * a logical property." />
      <item value="field" />
      <item value="ANNOTATION TYPE" />
      <item value="Element Type" />
      <item value="FIELD" />
      <item value="Json Property" />
      <item value="CAN OVERRIDE ACCESS MODIFIERS" />
      <item value="INFER CREATOR FROM CONSTRUCTOR PROPERTIES" />
      <item value="a logical property." />
      <item value="AUTO DETECT SETTERS" />
      <item value="mall" />
      <item value="Saturday" />
      <item value="Wednesday" />
      <item value="Wednessday" />
      <item value="Thursday" />
      <item value="Weekend Enum" />
      <item value="Enum" />
      <item value="GREEN" />
      <item value="YELLO" />
      <item value="example" />
      <item value="Integrate the remote changes (e.g." />
      <item value="its remote counterpart" />
      <item value="counterpart" />
      <item value="Presale" />
      <item value="maint.deeptel.com.cn" />
      <item value="footer" />
      <item value="conver From" />
      <item value="conver To" />
      <item value="conver" />
      <item value="covert Form" />
      <item value="See the full documentation for more details" />
      <item value="this annotation also has the {@code onConstructor} parameter" />
      <item value="listed" />
      <item value="Even though it is not listed" />
      <item value="though" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1907" />
        <entry key="ENGLISH" value="1884" />
        <entry key="CHINESE_TRADITIONAL" value="2" />
        <entry key="FRENCH" value="50" />
        <entry key="PORTUGUESE" value="5" />
        <entry key="SPANISH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="[-_]" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Lucida Sans Unicode" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="72daf72feb661e19" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>