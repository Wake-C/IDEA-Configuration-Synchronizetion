<application>
  <component name="AppStorage">
    <histories>
      <item value="bulletin" />
      <item value="orderbulletin" />
      <item value="orderboard" />
      <item value="Be Pro Act Log Style Complete Data" />
      <item value="mall Store List" />
      <item value="Mall Seller Join Product" />
      <item value="join Product" />
      <item value="new Be Pro Basic Data List" />
      <item value="package com.gt.mall.service.uc.product.impl; import com.alibaba.fastjson.JSON; import com.alibaba.fastjson.JSONObject; import com.gt.mall.bean.common.BeBusIdStoreIdData; import com.gt.mall.bean.common.BeStoreIdProIdData; import com.gt.mall.bean.image.BeBusIdProIdImageData; import com.gt.mall.bean.image.BeProImageData; import com.gt.mall.bean.product.*; import com.gt.mall.bean.product.uc.BeUcProBuyNowBO; import com.gt.mall.bean.product.uc.BeUcProGroupBasicBO; import com.gt.mall.bean.seller.BeUcProBasicBO; import com.gt.mall.bean.store.BeStoreProBasicData; import com.gt.mall.dao.seller.MallSellerJoinProductDAO; import com.gt.mall.entity.seller.MallSellerJoinProduct; import com.gt.mall.entity.store.MallStore; import com.gt.mall.service.common.async.ComAsyncService; import com.gt.mall.service.common.constant.ProSerConstant; import com.gt.mall.service.common.constant.ProSortConstant; import com.gt.mall.service.common.image.IComImageAsService; import com.gt.mall.service.common.product.IComProActLogUtilService; import com.gt.mall.service.common.product.IComProDuctService; import com.gt.mall.service.common.seller.IComSellerProductService; import com.gt.mall.service.common.shop.IComStoreGroupService; import com.gt.mall.service.common.shop.IComStoreService; import com.gt.mall.service.uc.product.IUcProDuctService; import com.gt.mall.service.uc.token.IUcTokenService; import com.gt.mall.utils.CommonUtil; import com.gt.mall.utils.page.PageHelper; import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Service; import javax.servlet.http.HttpServletRequest; import java.util.ArrayList; import java.util.Comparator; import java.util.List; /** * @author chendan * @date 2019/7/27 0027 16:52 */ @Slf4j @Service @RequiredArgsConstructor public class UcProDuctServiceImpl implements IUcProDuctService { private final IUcTokenService ucTokenService; private final IComStoreGroupService comStoreGroupService; private final IComStoreService comStoreService; private final IComProDuctService comProDuctService; private final IComImageAsService comImageAsService; private final IComProActLogUtilService comProActLogUtilService; private final MallSellerJoinProductDAO mallSellerJoinProductDAO; private final ComAsyncService comAsyncService; private final IComSellerProductService comSellerProductService; @Override public PageHelper&lt;BeProSearchBasicData&gt; selectBasicListPage(BeUcProGroupBasicBO beUcProGroupBasicBO, HttpServletRequest request) { Integer memberId = ucTokenService.findNoToken(request); BeProGroupBasicData beProGroupBasicData = JSONObject.parseObject(JSON.toJSONString(beUcProGroupBasicBO),BeProGroupBasicData.class); beProGroupBasicData.setMemberId(memberId); return comStoreGroupService.selectActBasicListPage(beProGroupBasicData); } @Override public BeStoreProBasicData selectStoreBusMsg(BeBusIdStoreIdData beBusIdStoreIdData) { return comStoreService.selectBusStore(beBusIdStoreIdData.getBusId(),beBusIdStoreIdData.getStoreId()); } @Override public List&lt;BeProImageData&gt; selectProIdBasicList(BeBusIdProIdImageData beBusIdProIdImageData) { return comImageAsService.selectProIdBasicList(beBusIdProIdImageData.getProId()); } @Override public BeProDuctDetailData selectProIdDetail(BeBusIdProIdImageData beBusIdProIdImageData, HttpServletRequest request) { return comProDuctService.selectProIdDetail(beBusIdProIdImageData.getBusId(),beBusIdProIdImageData.getProId()); } @Override public BeProActLogStyleData selectStoreIdProIdStyle(BeStoreIdProIdData beStoreIdProIdData) { return comProActLogUtilService.selectStoreIdProIdStyle(beStoreIdProIdData.getStoreId(),beStoreIdProIdData.getProId()); } @Override public void ordinaryBuyNow(BeUcProBuyNowBO beUcProBuyNowBO, HttpServletRequest request) { BeProBuyNowInputData beProBuyNowInputData = JSONObject.parseObject(JSON.toJSONString(beUcProBuyNowBO),BeProBuyNowInputData.class); Integer memberId = ucTokenService.findTokenByMemberId(request); beProBuyNowInputData.setMemberId(memberId); comProDuctService.ordinaryBuyNow(beProBuyNowInputData); } @Override public PageHelper&lt; BeProBasicData &gt; selectSellerBasicListPage( BeUcProBasicBO beUcProBasicBO, HttpServletRequest request ) { //得到所有参与分销的商品id List&lt;MallSellerJoinProduct &gt; joinProductList=mallSellerJoinProductDAO.selectByBusId( beUcProBasicBO.getBusId()); List&lt; Integer &gt; proIds = new ArrayList&lt;&gt;(); if ( CommonUtil.isNotEmpty( joinProductList ) ){ joinProductList.forEach( mallSellerJoinProduct &gt; { proIds.add( mallSellerJoinProduct.getProductId() ); } ); } //搜索条件不为空，查询出商品id列表，待开发 if ( CommonUtil.isNotEmpty( beUcProBasicBO.getSearch() ) &amp;&amp; CommonUtil.isNotEmpty( beUcProBasicBO.getMemberId() ) ) { //异步记录下搜索记录 comAsyncService.add( 0, beUcProBasicBO.getMemberId(), ProSerConstant.MALLFROM, beUcProBasicBO.getSearch() ); } if ( proIds.size() &gt; 0 ) { //搜索条件不为空，查询出商品id列表，待开发 if ( CommonUtil.isNotEmpty( beUcProBasicBO.getSearch() ) ) { //查询条件，获取商品id列表 List&lt; Integer &gt; proSerIds = comStoreGroupService.selectBusNameRuProId( beUcProBasicBO.getBusId(), beUcProBasicBO.getSearch() ); //查询条件交集 proIds.retainAll( proSerIds ); //查询出来的数据，进行list合并出数据 } List&lt;BeProBasicData&gt; beProBasicDataList = comProDuctService.selBeProBasicDataList(beUcProBasicBO.getBusId(),proIds,beUcProBasicBO.getSortStyle()); //过滤店铺 List&lt;MallStore&gt; mallStoreList = comStoreService.selectStoreList(beUcProBasicBO.getBusId()); List&lt;BeProBasicData&gt; newBeProBasicDataList = new ArrayList&lt;&gt;(); if (!mallStoreList.isEmpty()) { beProBasicDataList.forEach(beProBasicData &gt; { mallStoreList.forEach(mallStore &gt; { if (beProBasicData.getStoreId().equals(mallStore.getId())) { newBeProBasicDataList.add(beProBasicData); } }); }); } final MallSellerJoinProduct[] joinProduct = { null }; newBeProBasicDataList.forEach( beProBasicData &gt; { joinProduct[0] =joinProductList.stream().filter(m &gt; m.getProductId().equals(beProBasicData.getId())).findFirst().orElse(null); double commission = comSellerProductService.productCommisson(joinProduct[0], beProBasicData.getProPrice().doubleValue(), &quot;&quot;); beProBasicData.setCommissionPrice(CommonUtil.toBigDecimal(commission)); } ); if(beUcProBasicBO.getSortStyle()== ProSortConstant.PRICERISE){ newBeProBasicDataList.sort( Comparator.comparing( BeProBasicData::getCommissionPrice)); }else if(beUcProBasicBO.getSortStyle()==ProSortConstant.PRICEDOWN){ newBeProBasicDataList.sort(Comparator.comparing(BeProBasicData::getCommissionPrice).reversed()); } return PageHelper.getInsList(beUcProBasicBO.getCurPage(), beUcProBasicBO.getPageSize(),newBeProBasicDataList); } List&lt; BeProBasicData &gt; beProBasicDataList = new ArrayList&lt;&gt;(); return PageHelper.getInstance( beUcProBasicBO.getCurPage(), 0, beUcProBasicBO.getPageSize(), beProBasicDataList ); } }" />
      <item value="comment" />
      <item value="commend" />
      <item value="procommend" />
      <item value="selpro" />
      <item value="swagger 补充" />
      <item value="bind Member Token" />
      <item value="find Distribution Product By Bus Id And Product Id" />
      <item value="find Distribution Product List By Pro Ids" />
      <item value="be Group Buy Basic Data" />
      <item value="be Sec Kill Act Basic Data" />
      <item value="be Pro Duct Detail Data" />
      <item value="group Buy Service" />
      <item value="mall Image Associative DAO" />
      <item value="sec Kill" />
      <item value="seckill" />
      <item value="Clerk Product Detail VO" />
      <item value="intersection" />
      <item value="Intersection" />
      <item value="list Intersection" />
      <item value="entries Only On Right" />
      <item value="entries In Common" />
      <item value="clerk" />
      <item value="pro Commision" />
      <item value="Clerk Distribution Condition BO" />
      <item value="Clear Distribution Condition BO" />
      <item value="Clear Distribtuion Condition BO" />
      <item value="Clerk" />
      <item value="if (Objects.isNull(mallProduct)) { throw new MyException(ResponseEnums.PRODUCTDELETED); } if (mallProduct.getIsPublish().equals(1)) { throw new MyException(ResponseEnums.PRODUCTOFF); }" />
      <item value="select Bus Id Pro Id" />
      <item value="PRODUCTOFF" />
      <item value="productoff" />
      <item value="duplicate Product" />
      <item value="Two Plus Array List" />
      <item value="traverses" />
      <item value="For example" />
      <item value="for" />
      <item value="explicitly" />
      <item value="This method supports postprocessing on optional values" />
      <item value="postprocessing" />
      <item value="This method supports postprocessing on optional values, without * the need to explicitly check for a return status. For example, the * following code traverses a stream of file names, selects one that has * not yet been processed, and then opens that file, returning an" />
      <item value="If a value is present, apply the provided mapping function to it, * and if the result is nonnull, return an {@code Optional} describing the * result. Otherwise return an empty" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2413" />
        <entry key="ENGLISH" value="2363" />
        <entry key="CHINESE_TRADITIONAL" value="2" />
        <entry key="FRENCH" value="71" />
        <entry key="PORTUGUESE" value="5" />
        <entry key="SPANISH" value="6" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="[-_]" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Lucida Sans Unicode" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="72daf72feb661e19" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>