<application>
  <component name="AppStorage">
    <histories>
      <item value="Presale" />
      <item value="maint.deeptel.com.cn" />
      <item value="footer" />
      <item value="conver From" />
      <item value="conver To" />
      <item value="conver" />
      <item value="covert Form" />
      <item value="See the full documentation for more details" />
      <item value="this annotation also has the {@code onConstructor} parameter" />
      <item value="listed" />
      <item value="Even though it is not listed" />
      <item value="though" />
      <item value="Required arguments are final fields and fields with constraints such as" />
      <item value="equired arguments." />
      <item value="List of annotations to apply to the generated constructor." />
      <item value="on Constructor" />
      <item value="note the underscore after" />
      <item value="Annotations Go Here" />
      <item value="nothing we can do about that; it's to work around javac bugs" />
      <item value="nothing we can do about that" />
      <item value="Any annotations listed here are put on the generated constructor." />
      <item value="Placeholder annotation to enable the placement of annotations on the generated code" />
      <item value="Don't use this annotation, ever Read the documentation" />
      <item value="Placeholder annotation to enable the placement of annotations on the generated code." />
      <item value="The constructor will be generated with this access modifier" />
      <item value="The constructor will be generated with this access modifier." />
      <item value="Sets the access level of the constructor. By default, generated constructors are {@code public}." />
      <item value="private final MallProductDAO mallProductDAO; private final IRedisProDuctService redisProDuctService;≤ private final IComImageAsService comImageAsService; private final IComProInventoryService comProInventoryService; private final IRedisMallStockAllService redisMallStockAllService; private final IComPaySetService comPaySetService; private MallProduct mallProduct; @Override public int storeIdProCount(int storeId) { //缓存拿不到，中枪到数据库中，数据库拿到之后，存入缓存中 Integer count = redisProDuctService.getStockIdProCount(storeId); if(CommonUtil.isEmpty(count)){ count = mallProductDAO.selectStockIdCount(storeId); redisProDuctService.setStockIdProCount(storeId,count); } return count.intValue(); } @Override public void delStoreIdProCount(int storeId) { redisProDuctService.delStockIdProCount(storeId); } @Override public void deductStock(int proId, Object speId, int buyNum) { log.info(&quot;扣商品库存数量&quot;+ proId); mallProductDAO.deductStock(proId,buyNum); //有规格属性的情况下 if(CommonUtil.isNotEmpty(speId)){ comProInventoryService.deductSpeIdStock(proId,speId.toString(),buyNum); } } @Override public List&lt;MallProduct&gt; selectBusIdProList(int busId) { List&lt;MallProduct&gt; list = new ArrayList&lt;&gt;(); //根据商家id获取商品缓存列表 这里有个漏洞会有数据延迟不一致的问题，后期我们可以配合新增加锁，前期可以不考虑 String value = redisProDuctService.getBusIdProList(busId); if(CommonUtil.isEmpty(value)){ list = mallProductDAO.selBusProList(busId); //缓存有值，取缓存数据，无值，赋0为进去 if(list.size()&gt;0){ redisProDuctService.setBusIdProList(busId, JSONObject.toJSONString(list)); }else{ redisProDuctService.setBusIdProList(busId, RedisNoValueConstant.NOT VALUE); } }else{ //当缓存为0时，代表无商品，不需要中枪到数据库中，不等于0，有商品，直接转换数据 if(!value.equals(RedisNoValueConstant.NOT VALUE)){ list = JSONArray.parseArray(value,MallProduct.class); } } return list; } @Override public MallProduct selectBusIdProId(int busId, int proId) { List&lt;MallProduct&gt; list = this.selectBusIdProList(busId); if(list.size()&gt;0){ list = list.stream().filter(mallProduct &gt; (mallProduct.getId().equals(proId))).collect(Collectors.toList()); if(list.size()&gt;0){ return mallProduct; } } return null; } @Override public List&lt;MallProduct&gt; selectBusIdByProIds(int busId, List&lt;Integer&gt; proIds) { List&lt;MallProduct&gt; list = new ArrayList&lt;&gt;(); List&lt;MallProduct&gt; mallProductList = this.selectBusIdProList(busId); if(CommonUtil.isNotEmpty(mallProductList)&amp;&amp;mallProductList.size()&gt;0){ proIds.forEach(proId &gt;{ //获取单个商品的信息 List&lt;MallProduct&gt; mallProducts = mallProductList.stream().filter(mallProduct &gt; (mallProduct.getId().equals(proId))).collect(Collectors.toList()); //单个商品有，加入到返回列表中 if(mallProducts.size()&gt;0){ list.add(mallProducts.get(0)); } }); } return list; } @Override public List&lt;Integer&gt; selectProIdsList(int busId, int storeId) { List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); //根据商家id获取商品数量 List&lt;MallProduct&gt; selectBusIdProList = this.selectBusIdProList(busId); if(selectBusIdProList.size()&gt;0){ //获取店铺下面的商品列表 selectBusIdProList = selectBusIdProList.stream().filter(mallProduct &gt; (mallProduct.getShopId().equals(storeId))).collect(Collectors.toList()); //遍历拿到商品id的数据 selectBusIdProList.forEach(mallProduct &gt;{ list.add(mallProduct.getId()); }); } return list; } @Override public void delBusIdList(int busId) { redisProDuctService.delBusIdProList(busId); } @Override public List&lt;MallProduct&gt; selectIdsList(int busId, List&lt;Integer&gt; proIds, int sortStyle) { List&lt;MallProduct&gt; list = this.selectBusIdByProIds(busId,proIds); //说明有商品 商品进行相关顺序进行排序 if(list.size()&gt;0){ //降序 if(sortStyle== ProSortConstant.ID DOWN){ list.sort(Comparator.comparing(MallProduct::getId).reversed()); }else if(sortStyle==ProSortConstant.SALE DOWN){ list.sort(Comparator.comparing(MallProduct::getProSaleTotal).reversed()); }else if(sortStyle==ProSortConstant.PRICE RISE){ list.sort(Comparator.comparing(MallProduct::getProPrice)); }else if(sortStyle==ProSortConstant.PRICE DOWN){ list.sort(Comparator.comparing(MallProduct::getProPrice).reversed()); } } return list; } @Override public List&lt;BeProBasicData&gt; selBeProBasicDataList(int busId, List&lt;Integer&gt; proIds, int sortStyle) { List&lt;BeProBasicData&gt; beProBasicDataList = new ArrayList&lt;&gt;(); List&lt;MallProduct&gt; mallProductList = this.selectIdsList(busId,proIds, sortStyle); if(mallProductList.size()&gt;0){ //上架的商品才展现出来 mallProductList = mallProductList.stream().filter(b &gt;b.getIsPublish().equals(1)).collect(Collectors.toList()); } //商品有信息时，才执行下面方法，如果商品都没有信息，下面方法就没有必要执行 if(mallProductList.size()&gt;0) { //获取商品主图片列表 List&lt;BeProIdMainImageData&gt; beProIdMainImageDataList = comImageAsService.isMainImage(busId, proIds); mallProductList.forEach(mallProduct &gt; { int proId = mallProduct.getId(); BeProBasicData beProBasicData = new BeProBasicData(); beProBasicData.setId(mallProduct.getId()); beProBasicData.setIsMemberDiscount(mallProduct.getIsMemberDiscount()); beProBasicData.setIsSpe(mallProduct.getIsSpecifica()); beProBasicData.setProCostPrice(mallProduct.getProCostPrice()); beProBasicData.setProPrice(mallProduct.getProPrice()); beProBasicData.setStockNum(mallProduct.getProStockTotal()); beProBasicData.setProLabel(mallProduct.getProLabel()); beProBasicData.setProName(mallProduct.getProName()); //获取商品主图 List&lt;BeProIdMainImageData&gt; beProIdMainImage = beProIdMainImageDataList.stream().filter(beProIdMainImageData &gt; (beProIdMainImageData.getProId() == proId)).collect(Collectors.toList()); //大于0代表有主图片，把主图片存放进去 if (beProIdMainImage.size() &gt; 0) { beProBasicData.setPidImageUrl(beProIdMainImage.get(0).getImageUrl()); } beProBasicDataList.add(beProBasicData); }); } return beProBasicDataList; } @Override public PageHelper&lt;BeProBasicData&gt; selBeProBasicDataListPage(int busId, List&lt;Integer&gt; proIds, int sortStyle, int curPage, int pageSize) { List&lt;BeProBasicData&gt; beProBasicDataList = this.selBeProBasicDataList(busId,proIds,sortStyle); return PageHelper.getInsList(curPage,pageSize,beProBasicDataList); } @Override public BeProDuctDetailData selectProIdDetail(int busId, int proId) { BeProDuctDetailData beProDuctDetailData = null; List&lt;MallProduct&gt; mallProductList = this.selectBusIdProList(busId); //商品信息存在 if(mallProductList.size()&gt;0){ List&lt;Integer&gt; proIds = new ArrayList&lt;&gt;(); proIds.add(proId); List&lt;BeProIdMainImageData&gt; beProIdMainImageDataList = comImageAsService.isMainImage(busId, proIds); mallProductList = mallProductList.stream().filter(mallProduct &gt; mallProduct.getId().equals(proId)).collect(Collectors.toList()); //商品信息存在，继续往下走 if(mallProductList.size()&gt;0){ //商品基础数据 MallProduct mallProduct = mallProductList.get(0); beProDuctDetailData = new BeProDuctDetailData(); beProDuctDetailData.setProTypeId(mallProduct.getProTypeId()); beProDuctDetailData.setId(proId); beProDuctDetailData.setProName(mallProduct.getProName()); beProDuctDetailData.setProLabel(mallProduct.getProLabel()); beProDuctDetailData.setIsSpe(mallProduct.getIsSpecifica()); beProDuctDetailData.setProPrice(mallProduct.getProPrice()); beProDuctDetailData.setProCostPrice(mallProduct.getProCostPrice()); beProDuctDetailData.setIsShowSale(mallProduct.getIsShowSale()); beProDuctDetailData.setProSaleTotal(mallProduct.getProSaleTotal()); beProDuctDetailData.setProUnit(mallProduct.getProUnitName()); beProDuctDetailData.setProFreightSet(mallProduct.getProFreightSet()); beProDuctDetailData.setProFreightPrice(mallProduct.getProFreightPrice()); beProDuctDetailData.setProFreightTempId(mallProduct.getProFreightTempId()); beProDuctDetailData.setIsCoupons(mallProduct.getIsCoupons()); beProDuctDetailData.setIsPublish(mallProduct.getIsPublish()); //开启统一运费 if(mallProduct.getProFreightSet().equals(1)){ //是否开启运费，如果开启了，就只要这个运费就行，就不需要调运费接口 boolean isFreight = comPaySetService.isFreight(busId); if(isFreight) { beProDuctDetailData.setIsFreight(1); } } //是否开启评价功能 boolean isComment = comPaySetService.isComment(busId); //开启返回1 if(isComment){ beProDuctDetailData.setIsComment(1); } //获取商品主图 List&lt;BeProIdMainImageData&gt; beProIdMainImage = beProIdMainImageDataList.stream().filter(beProIdMainImageData &gt; (beProIdMainImageData.getProId() == proId)).collect(Collectors.toList()); //大于0代表有主图片，把主图片存放进去 if (beProIdMainImage.size() &gt; 0) { beProDuctDetailData.setPidImageUrl(beProIdMainImage.get(0).getImageUrl()); } //商品无规格时的数据 if(mallProduct.getIsSpecifica().equals(0)){ int stockNum = redisMallStockAllService.getStock(proId,&quot;0&quot;); beProDuctDetailData.setStockNum(stockNum); }else{ BeProInvNewData beProInvNewData = comProInventoryService.selectNewProId(proId); beProDuctDetailData.setStockNum(beProInvNewData.getStockNum()); beProDuctDetailData.setBeProInvNewData(beProInvNewData); //有规格属性值，价钱改成规格价 List&lt;BeProInvBasicData&gt; beProInvBasicDataList = beProInvNewData.getBeProInvBasicDataList(); BeProInvBasicData beProInvBasicData = beProInvBasicDataList.stream().filter(b &gt;b.getIsDefault()==1).findFirst().orElse(null); if(CommonUtil.isNotEmpty(beProInvBasicData)){ //有规格价，就把规格默认价位放进来 beProDuctDetailData.setProPrice(beProInvBasicData.getInvPrice()); } } } } if(CommonUtil.isEmpty(beProDuctDetailData)){ throw new MyException(ResponseEnums.NO PRO ID.getCode(),ResponseEnums.NO PRO ID.getDesc()); } return beProDuctDetailData; } @Override public BePageSpeData selectProIdSpe(int busId, int proId) { MallProduct mallProduct = this.selectBusIdProId(busId,proId); if(CommonUtil.isEmpty(mallProduct)){ throw new MyException(ResponseEnums.NO PRO ID.getCode(),ResponseEnums.NO PRO ID.getDesc()); } BePageSpeData bePageSpeData = new BePageSpeData(); bePageSpeData.setProTypeId(mallProduct.getProTypeId()); bePageSpeData.setProName(mallProduct.getProName()); List&lt;Integer&gt; proIds = new ArrayList&lt;&gt;(); proIds.add(proId); List&lt;BeProIdMainImageData&gt; isMainImageList = comImageAsService.isMainImage(busId,proIds); if(isMainImageList.size()&gt;0){ isMainImageList.forEach(beProIdMainImageData &gt; { if(beProIdMainImageData.getProId()==proId){ bePageSpeData.setPidImageUrl(beProIdMainImageData.getImageUrl()); } }); } //商品无规格时的数据 if(mallProduct.getIsSpecifica().equals(0)){ int stockNum = redisMallStockAllService.getStock(proId,&quot;0&quot;); bePageSpeData.setStockNum(stockNum); }else{ BeProInvNewData beProInvNewData = comProInventoryService.selectNewProId(proId); bePageSpeData.setStockNum(beProInvNewData.getStockNum()); bePageSpeData.setBeProInvNewData(beProInvNewData); } bePageSpeData.setProPrice(mallProduct.getProPrice()); bePageSpeData.setProCode(mallProduct.getProCode()); return bePageSpeData; } @Override public int proIdNum(int proId, String speIds) { return redisMallStockAllService.getStock(proId,speIds); } @Override public boolean verProIdIsAmple(int proId, String speIds, int buyNum) { int num = this.proIdNum(proId,speIds); if(num&gt;=buyNum){ return true; } return false; } @Override public void ordinaryBuyNow(BeProBuyNowInputData beProBuyNowInputData) { MallProduct mallProduct = this.selectBusIdProId(beProBuyNowInputData.getBusId(),beProBuyNowInputData.getProId()); //未找到商品，抛出异常 if(CommonUtil.isEmpty(mallProduct)){ throw new MyException(ResponseEnums.NO PRO ID.getCode(),ResponseEnums.NO PRO ID.getDesc()); } //第二步，验证库存是否充足 boolean isNum = this.verProIdIsAmple(beProBuyNowInputData.getProId(),beProBuyNowInputData.getSpeIds(),beProBuyNowInputData.getBuyNum()); if(!isNum){ //库存不足 throw new MyException(SpeEnums.PRO STOCK NO.getCode(),SpeEnums.PRO STOCK NO.getDesc()); } } @Override public BeProOrderBasicVO selectOrderBasic(BeProOrderBasicBO beProOrderBasicBO) { BeProOrderBasicVO beProOrderBasicVO = new BeProOrderBasicVO(); MallProduct mallProduct = this.selectBusIdProId(beProOrderBasicBO.getBusId(),beProOrderBasicBO.getProId()); beProOrderBasicVO.setProId(mallProduct.getId()); beProOrderBasicVO.setProPrice(mallProduct.getProPrice()); if(CommonUtil.isNotEmpty(beProOrderBasicBO.getSpeIds())){ beProOrderBasicVO.setSpeIds(beProOrderBasicBO.getSpeIds()); String speName = comProInventoryService.findProIdSpeId(beProOrderBasicBO.getProId(),beProOrderBasicBO.getSpeIds()); beProOrderBasicVO.setSpeName(speName); BeProInvNewData beProInvNewData = comProInventoryService.selectNewProId(mallProduct.getId()); BeProInvBasicData beProInvBasicData = beProInvNewData.getBeProInvBasicDataList().stream().filter(s &gt;s.getSpeIds().equals(beProOrderBasicBO.getSpeIds())).findFirst().orElse(null); //有规格就规格价 if(CommonUtil.isNotEmpty(beProInvBasicData)){ beProOrderBasicVO.setProPrice(beProInvBasicData.getInvPrice()); } } beProOrderBasicVO.setProName(mallProduct.getProName()); beProOrderBasicVO.setProTypeId(mallProduct.getProTypeId()); if(CommonUtil.isNotEmpty(mallProduct.getProCode())){ beProOrderBasicVO.setProCode(mallProduct.getProCode()); } List&lt;Integer&gt; proIds = new ArrayList&lt;&gt;(); proIds.add(beProOrderBasicBO.getProId()); List&lt;BeProIdMainImageData&gt; isMainImageList = comImageAsService.isMainImage(beProOrderBasicBO.getBusId(),proIds); if(isMainImageList.size()&gt;0){ isMainImageList.forEach(beProIdMainImageData &gt; { if(beProIdMainImageData.getProId()==beProOrderBasicBO.getProId()){ beProOrderBasicVO.setProImage(beProIdMainImageData.getImageUrl()); } }); } beProOrderBasicVO.setStoreId(mallProduct.getShopId()); beProOrderBasicVO.setIsFenBi(mallProduct.getIsFenbiDeduction()); beProOrderBasicVO.setIsIntegral(mallProduct.getIsIntegralDeduction()); beProOrderBasicVO.setIsCoupon(mallProduct.getIsCoupons()); return beProOrderBasicVO; } @Override public List&lt;BeProductCartBasicVO&gt; selectFindCard(int busId, List&lt;BeProOrderBasicBO&gt; beProOrderBasicBOList) { List&lt;BeProductCartBasicVO&gt; beProductCartBasicVOList = new ArrayList&lt;&gt;(); List&lt;Integer&gt; proIds = new ArrayList&lt;&gt;(); beProOrderBasicBOList.forEach(beProOrderBasicBO &gt; { proIds.add(beProOrderBasicBO.getProId()); }); //获取列表数据 List&lt;MallProduct&gt; list = this.selectBusIdByProIds(busId,proIds); List&lt;BeProIdMainImageData&gt; beProIdMainImageDataList = new ArrayList&lt;&gt;(); if(list.size()&gt;0){ beProIdMainImageDataList = comImageAsService.isMainImage(busId, proIds); } List&lt;BeProIdMainImageData&gt; finalBeProIdMainImageDataList = beProIdMainImageDataList; list.forEach(mallProduct &gt; { //是否是合法的数据 虚拟物品不在购物车，或者购物车的规格不对，都不在购物车上数据 boolean result = true; BeProductCartBasicVO beProductCartBasicVO = new BeProductCartBasicVO(); beProductCartBasicVO.setProId(mallProduct.getId()); beProductCartBasicVO.setProName(mallProduct.getProName()); BeProIdMainImageData beProIdMainImageData = finalBeProIdMainImageDataList.stream().filter(b &gt;b.getProId()==mallProduct.getId()).findFirst().orElse(null); if(CommonUtil.isNotEmpty(beProIdMainImageData)){ beProductCartBasicVO.setProImage(beProIdMainImageData.getImageUrl()); } if(!mallProduct.getProTypeId().equals(0)){ result = false; } //如果有规格 封装规格值 if(result&amp;&amp;mallProduct.getIsSpecifica().equals(1)){ BeProOrderBasicBO beProOrderBasicBO = beProOrderBasicBOList.stream().filter(b &gt; b.getProId().equals(mallProduct.getId())).findFirst().orElse(null); if(CommonUtil.isEmpty(beProOrderBasicBO)||CommonUtil.isEmpty(beProOrderBasicBO.getSpeIds())){ result = false; }else{ BeProInvBasicDetailVO beProInvBasicDetailVO = comProInventoryService.findProBasic(mallProduct.getId(),beProOrderBasicBO.getSpeIds()); beProductCartBasicVO.setSpeNames(beProInvBasicDetailVO.getSpeName()); beProductCartBasicVO.setProPrice(beProInvBasicDetailVO.getInvPrice()); beProductCartBasicVO.setStockNum(beProInvBasicDetailVO.getInvNum()); beProductCartBasicVO.setSpeIds(beProInvBasicDetailVO.getSpeIds()); if(CommonUtil.isNotEmpty(beProInvBasicDetailVO.getImageUrl())){ beProductCartBasicVO.setProImage(beProInvBasicDetailVO.getImageUrl()); } } }else{ beProductCartBasicVO.setProPrice(mallProduct.getProPrice()); beProductCartBasicVO.setStockNum(redisMallStockAllService.getStock(mallProduct.getId(),&quot;&quot;)); } if(result){ beProductCartBasicVO.setStoreId(mallProduct.getShopId()); //上架代表正常商品，其余都是失效商品 if(mallProduct.getIsPublish().equals(1)){ beProductCartBasicVO.setIsLose(0); }else{ beProductCartBasicVO.setIsLose(1); } beProductCartBasicVO.setIsCoupon(mallProduct.getIsCoupons()); beProductCartBasicVOList.add(beProductCartBasicVO); } }); return beProductCartBasicVOList; }" />
      <item value="Mall Product" />
      <item value="store Id Pro Count" />
      <item value="redis Pro Duct Service" />
      <item value="max File Size" />
      <item value="select Bus Id Pro List" />
      <item value="I Redis Pro Duct Service" />
      <item value="store Id" />
      <item value="sel Bus Pro List" />
      <item value="select Bus Id By Pro Ids" />
      <item value="select Pro Ids List" />
      <item value="1.微信公众号消息拦截器 增加小程序回调设置" />
      <item value="SHOP BUSINESS NAME IS TOO LONG" />
      <item value="The dependencies of some of the beans in the application context form a cycle:" />
      <item value="den Shop Id Mess Age List" />
      <item value="Copies bytes from the URL &lt;code&gt;source&lt;/code&gt; to a file * &lt;code&gt;destination&lt;/code&gt;. The directories up to &lt;code&gt;destination&lt;/code&gt; * will be created if they don't already exist. &lt;code&gt;destination&lt;/code&gt; * will be overwritten if it already exists." />
      <item value="Back Stage Sso Queue" />
      <item value="token Out Fanout Exchange" />
      <item value="Shutdown Signal Exception" />
      <item value="Blocking Queue Consumer$Declaration Exception" />
      <item value="audit Status" />
      <item value="poetry" />
      <item value="current Release Version" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1876" />
        <entry key="ENGLISH" value="1856" />
        <entry key="CHINESE_TRADITIONAL" value="2" />
        <entry key="FRENCH" value="50" />
        <entry key="PORTUGUESE" value="5" />
        <entry key="SPANISH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="[-_]" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Lucida Sans Unicode" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="72daf72feb661e19" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>